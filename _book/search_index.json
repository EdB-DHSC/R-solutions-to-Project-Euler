[
["index.html", "Worked Solutions to Project Euler in R Chapter 1 index", " Worked Solutions to Project Euler in R James Riley 2020-10-02 Chapter 1 index "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction There’s lots of intro to R books on Bookdown, why do we need another? Ultimately, we don’t - but I hope that this project will be useful for students and contributors. For students, I like the Project Euler problems for learning a language. It’s my hope that worked examples will be useful to someone. For contributors, they say you don’t understand something properly until you can explain it to someone else. So contributors can gain something from submitting solutions via a GitHub Pull Request. (TODO: link to project’s GH) "],
["problems1.html", "Chapter 3 Problem set 1 3.1 Intro 3.2 Problem 1 3.3 Problem 2", " Chapter 3 Problem set 1 3.1 Intro For this section I’m planning on giving two solutions - one in base R, one with Tidyverse. I hope to demonstrate that Tidyverse solutions are easier to follow. 3.2 Problem 1 Multiples of 3 and 5 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000. 3.2.1 Base R For this I’d like to start with a vector from 1:1000: x &lt;- 1:999 Then filter for multiples of 3 or 5: x &lt;- x[x %% 3 == 0 | x %% 5 == 0] # x modulo 3 = 0 or x modulo 5 = 0. And finally, sum: sum(x) ## [1] 233168 3.2.2 Tidyverse This is easy enough to do with a single pipe: library(&quot;tidyverse&quot;) tibble(x = 1:999) %&gt;% # Start with all numbers 1:999 filter(x %% 3 == 0 | x %% 5 == 0) %&gt;% # keep multiples of 3 or 5 summarise(solution = sum(x)) %&gt;% # Add them together knitr::kable() # Print it as a table solution 233168 3.2.3 Other Comments You can also do this as an inclusion/exclusion problem. You can add up the multiples of 3, plus the multiples of 5, but then you’ve double-counted the multiples of 3 &amp; 5, so you need to subtract the multiples of 15. R has no problems with a 999-element vector, so in this case I prefer starting with every integer and filtering down to reduce the risk of programmer error. 3.3 Problem 2 Even Fibonacci numbers Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, … By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. 3.3.1 Base R We need a loop to define the next Fibonacci number. fib &lt;- c(1, 1) while (fib[length(fib)] &lt; 4000000) { new_fib &lt;- fib[length(fib)] + fib[length(fib) - 1] # sum of last 2 values fib &lt;- c(fib, new_fib) # extend the vector } Then filter and sum: sum(fib[fib %% 2 == 0 &amp; fib &lt; 4000000]) ## [1] 4613732 3.3.2 Tidyverse We still need our loop, but we can use {dplyr}’s last function. fib &lt;- c(1, 1) while (last(fib) &lt; 4000000) { new_fib &lt;- last(fib) + nth(fib, -2) # sum of last 2 values fib &lt;- c(fib, new_fib) # extend the vector } Then the filter and sum is a bit clearer: tibble(fib) %&gt;% filter(fib &lt; 4000000, fib %% 2 == 0) %&gt;% summarise(sum = sum(fib)) %&gt;% knitr::kable() sum 4613732 "]
]
