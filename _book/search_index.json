[
["index.html", "Worked Solutions to Project Euler in R Chapter 1 index", " Worked Solutions to Project Euler in R See contributing.md 2020-10-07 Chapter 1 index "],
["intro.html", "Chapter 2 Introduction 2.1 What is Project Euler? 2.2 Who are the problems aimed at? 2.3 How to contribute to this project? 2.4 REMEMBER: Anyone can make a PR", " Chapter 2 Introduction Project Euler Logo 2.1 What is Project Euler? Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help you arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems. The motivation for starting Project Euler, and its continuation, is to provide a platform for the inquiring mind to delve into unfamiliar areas and learn new concepts in a fun and recreational context. 2.2 Who are the problems aimed at? The intended audience include students for whom the basic curriculum is not feeding their hunger to learn, adults whose background was not primarily mathematics but had an interest in things mathematical, and professionals who want to keep their problem solving and mathematics on the cutting edge. Here, in this repository you can find the solutions to the various problems for learning a language in the Project Euler. 2.3 How to contribute to this project? You may solve any problem in the scope of Project Euler and mention your name to the CONTRIBUTORS.md file. Make a pull request for your work and wait for it to be merged! 2.4 REMEMBER: Anyone can make a PR Getting started: Fork this repository Clone your fork down to your local machine git clone https://github.com/jimr1603/R-solutions-to-Project-Euler.git Create a branch git checkout -b branch-name Make your changes Commit and push git add . git commit -m &#39;Commit message&#39; git push origin branch-name Create a new pull request from your forked repository (Click the New Pull Request button located at the top of your repo) Wait for your PR review and merge approval! Star this repository if you had fun! Don’t forget to add your name to the CONTRIBUTING.md file using the below convention: #### Name: YOUR NAME - Location: Country - Bio: Who are you? Your interests? - GitHub: [GitHub account name](GitHub link) "],
["problems1.html", "Chapter 3 Problem set 1 3.1 Intro 3.2 Problem 1 3.3 Problem 2", " Chapter 3 Problem set 1 3.1 Intro For this section I’m planning on giving two solutions - one in base R, one with Tidyverse. I hope to demonstrate that Tidyverse solutions are easier to follow. 3.2 Problem 1 Multiples of 3 and 5 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000. 3.2.1 Base R For this I’d like to start with a vector from 1:1000: x &lt;- 1:999 Then filter for multiples of 3 or 5: x &lt;- x[x %% 3 == 0 | x %% 5 == 0] # x modulo 3 = 0 or x modulo 5 = 0. And finally, sum: sum(x) ## [1] 233168 3.2.2 Tidyverse This is easy enough to do with a single pipe: library(&quot;tidyverse&quot;) tibble(x = 1:999) %&gt;% # Start with all numbers 1:999 filter(x %% 3 == 0 | x %% 5 == 0) %&gt;% # keep multiples of 3 or 5 summarise(solution = sum(x)) %&gt;% # Add them together knitr::kable() # Print it as a table solution 233168 3.2.3 Other Comments You can also do this as an inclusion/exclusion problem. You can add up the multiples of 3, plus the multiples of 5, but then you’ve double-counted the multiples of 3 &amp; 5, so you need to subtract the multiples of 15. R has no problems with a 999-element vector, so in this case I prefer starting with every integer and filtering down to reduce the risk of programmer error. 3.3 Problem 2 Even Fibonacci numbers Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, … By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. 3.3.1 Base R We need a loop to define the next Fibonacci number. fib &lt;- c(1, 1) while (fib[length(fib)] &lt; 4000000) { new_fib &lt;- fib[length(fib)] + fib[length(fib) - 1] # sum of last 2 values fib &lt;- c(fib, new_fib) # extend the vector } Then filter and sum: sum(fib[fib %% 2 == 0 &amp; fib &lt; 4000000]) ## [1] 4613732 3.3.2 Tidyverse We still need our loop, but we can use {dplyr}’s last function. fib &lt;- c(1, 1) while (last(fib) &lt; 4000000) { new_fib &lt;- last(fib) + nth(fib, -2) # sum of last 2 values fib &lt;- c(fib, new_fib) # extend the vector } Then the filter and sum is a bit clearer: tibble(fib) %&gt;% filter(fib &lt; 4000000, fib %% 2 == 0) %&gt;% summarise(sum = sum(fib)) %&gt;% knitr::kable() sum 4613732 "]
]
